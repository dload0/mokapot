use crate::{
    elements::{
        field::ConstantValue,
        references::{ClassReference, FieldReference, InterfaceMethodReference, MethodReference},
        MethodDescriptor,
    },
    types::{FieldType, PrimitiveType},
};

use super::ProgramCounter;

#[derive(Debug)]
pub enum Instruction {
    // Constants
    Nop,
    AConstNull,
    IConstM1,
    IConst0,
    IConst1,
    IConst2,
    IConst3,
    IConst4,
    IConst5,
    LConst0,
    LConst1,
    FConst0,
    FConst1,
    FConst2,
    DConst0,
    DConst1,
    BiPush(u8),
    SiPush(u16),
    Ldc(ConstantValue),
    LdcW(ConstantValue),
    Ldc2W(ConstantValue),

    // Loads
    ILoad(u8),
    LLoad(u8),
    FLoad(u8),
    DLoad(u8),
    ALoad(u8),
    ILoad0,
    ILoad1,
    ILoad2,
    ILoad3,
    LLoad0,
    LLoad1,
    LLoad2,
    LLoad3,
    FLoad0,
    FLoad1,
    FLoad2,
    FLoad3,
    DLoad0,
    DLoad1,
    DLoad2,
    DLoad3,
    ALoad0,
    ALoad1,
    ALoad2,
    ALoad3,
    IALoad,
    LALoad,
    FALoad,
    DALoad,
    AALoad,
    BALoad,
    CALoad,
    SALoad,

    // Stores
    IStore(u8),
    LStore(u8),
    FStore(u8),
    DStore(u8),
    AStore(u8),
    IStore0,
    IStore1,
    IStore2,
    IStore3,
    LStore0,
    LStore1,
    LStore2,
    LStore3,
    FStore0,
    FStore1,
    FStore2,
    FStore3,
    DStore0,
    DStore1,
    DStore2,
    DStore3,
    AStore0,
    AStore1,
    AStore2,
    AStore3,
    IAStore,
    LAStore,
    FAStore,
    DAStore,
    AAStore,
    BAStore,
    CAStore,
    SAStore,

    // Stack
    Pop,
    Pop2,
    Dup,
    DupX1,
    DupX2,
    Dup2,
    Dup2X1,
    Dup2X2,
    Swap,

    // Math
    IAdd,
    LAdd,
    FAdd,
    DAdd,
    ISub,
    LSub,
    FSub,
    DSub,
    IMul,
    LMul,
    FMul,
    DMul,
    IDiv,
    LDiv,
    FDiv,
    DDiv,
    IRem,
    LRem,
    FRem,
    DRem,
    INeg,
    LNeg,
    FNeg,
    DNeg,
    IShl,
    LShl,
    IShr,
    LShr,
    IUShr,
    LUShr,
    IAnd,
    LAnd,
    IOr,
    LOr,
    IXor,
    LXor,
    IInc(u8, i8),

    // Conversions
    I2L,
    I2F,
    I2D,
    L2I,
    L2F,
    L2D,
    F2I,
    F2L,
    F2D,
    D2I,
    D2L,
    D2F,
    I2B,
    I2C,
    I2S,

    // Comparisons
    LCmp,
    FCmpL,
    FCmpG,
    DCmpL,
    DCmpG,
    IfEq(ProgramCounter),
    IfNe(ProgramCounter),
    IfLt(ProgramCounter),
    IfGe(ProgramCounter),
    IfGt(ProgramCounter),
    IfLe(ProgramCounter),
    IfICmpEq(ProgramCounter),
    IfICmpNe(ProgramCounter),
    IfICmpLt(ProgramCounter),
    IfICmpGe(ProgramCounter),
    IfICmpGt(ProgramCounter),
    IfICmpLe(ProgramCounter),
    IfACmpEq(ProgramCounter),
    IfACmpNe(ProgramCounter),

    // Control
    Goto(ProgramCounter),
    Jsr(ProgramCounter),
    Ret(u8),
    TableSwitch {
        default: i32,
        low: i32,
        high: i32,
        jump_targets: Vec<ProgramCounter>,
    },
    LookupSwitch {
        default: i32,
        match_targets: Vec<(i32, ProgramCounter)>,
    },
    IReturn,
    LReturn,
    FReturn,
    DReturn,
    AReturn,
    Return,

    // References
    GetStatic(FieldReference),
    PutStatic(FieldReference),
    GetField(FieldReference),
    PutField(FieldReference),
    InvokeVirtual(MethodReference),
    InvokeSpecial(MethodReference),
    InvokeStatic(MethodReference),
    InvokeInterface(InterfaceMethodReference, u8),
    InvokeDynamic(u16, String, MethodDescriptor),
    New(ClassReference),
    NewArray(PrimitiveType),
    ANewArray(ClassReference),
    ArrayLength,
    AThrow,
    CheckCast(u16),
    InstanceOf(u16),
    MonitorEnter,
    MonitorExit,

    // Extended
    WideILoad(u16),
    WideLLoad(u16),
    WideFLoad(u16),
    WideDLoad(u16),
    WideALoad(u16),
    WideIStore(u16),
    WideLStore(u16),
    WideFStore(u16),
    WideDStore(u16),
    WideAStore(u16),
    WideIInc(u16, i16),
    WideRet(u16),
    MultiANewArray(ArrayTypeRef, u8),
    IfNull(ProgramCounter),
    IfNonNull(ProgramCounter),
    GotoW(ProgramCounter),
    JsrW(ProgramCounter),

    // Reserved
    Breakpoint,
    ImpDep1,
    ImpDep2,
}

impl Instruction {
    /// Gets the opcode of the [Instruction].
    pub fn opcode(&self) -> u8 {
        use Instruction::*;
        match self {
            &AALoad => 0x32,
            &AAStore => 0x53,
            &AConstNull => 0x01,
            &ALoad(_) => 0x19,
            &ALoad0 => 0x2a,
            &ALoad1 => 0x2b,
            &ALoad2 => 0x2c,
            &ALoad3 => 0x2d,
            &ANewArray(_) => 0xbd,
            &AReturn => 0xb0,
            &ArrayLength => 0xbe,
            &AStore(_) => 0x3a,
            &AStore0 => 0x4b,
            &AStore1 => 0x4c,
            &AStore2 => 0x4d,
            &AStore3 => 0x4e,
            &AThrow => 0xbf,
            &BALoad => 0x33,
            &BAStore => 0x54,
            &BiPush(_) => 0x10,
            &CALoad => 0x34,
            &CAStore => 0x55,
            &CheckCast(_) => 0xc0,
            &D2F => 0x90,
            &D2I => 0x8e,
            &D2L => 0x8f,
            &DAdd => 0x63,
            &DALoad => 0x31,
            &DAStore => 0x52,
            &DCmpG => 0x98,
            &DCmpL => 0x97,
            &DConst0 => 0x0e,
            &DConst1 => 0x0f,
            &DDiv => 0x6f,
            &DLoad(_) => 0x18,
            &DLoad0 => 0x26,
            &DLoad1 => 0x27,
            &DLoad2 => 0x28,
            &DLoad3 => 0x29,
            &DMul => 0x6b,
            &DNeg => 0x77,
            &DRem => 0x73,
            &DReturn => 0xaf,
            &DStore(_) => 0x39,
            &DStore0 => 0x47,
            &DStore1 => 0x48,
            &DStore2 => 0x49,
            &DStore3 => 0x4a,
            &DSub => 0x67,
            &Dup => 0x59,
            &DupX1 => 0x5a,
            &DupX2 => 0x5b,
            &Dup2 => 0x5c,
            &Dup2X1 => 0x5d,
            &Dup2X2 => 0x5e,
            &F2D => 0x8d,
            &F2I => 0x8b,
            &F2L => 0x8c,
            &FAdd => 0x62,
            &FALoad => 0x30,
            &FAStore => 0x51,
            &FCmpG => 0x96,
            &FCmpL => 0x95,
            &FConst0 => 0x0b,
            &FConst1 => 0x0c,
            &FConst2 => 0x0d,
            &FDiv => 0x6e,
            &FLoad(_) => 0x17,
            &FLoad0 => 0x22,
            &FLoad1 => 0x23,
            &FLoad2 => 0x24,
            &FLoad3 => 0x25,
            &FMul => 0x6a,
            &FNeg => 0x76,
            &FRem => 0x72,
            &FReturn => 0xae,
            &FStore(_) => 0x38,
            &FStore0 => 0x43,
            &FStore1 => 0x44,
            &FStore2 => 0x45,
            &FStore3 => 0x46,
            &FSub => 0x66,
            &GetField(_) => 0xb4,
            &GetStatic(_) => 0xb2,
            &Goto(_) => 0xa7,
            &GotoW(_) => 0xc8,
            &I2B => 0x91,
            &I2C => 0x92,
            &I2D => 0x87,
            &I2F => 0x86,
            &I2L => 0x85,
            &I2S => 0x93,
            &IAdd => 0x60,
            &IALoad => 0x2e,
            &IAnd => 0x7e,
            &IAStore => 0x4f,
            &IConstM1 => 0x02,
            &IConst0 => 0x03,
            &IConst1 => 0x04,
            &IConst2 => 0x05,
            &IConst3 => 0x06,
            &IConst4 => 0x07,
            &IConst5 => 0x08,
            &IDiv => 0x6c,
            &IfACmpEq(_) => 0xa5,
            &IfACmpNe(_) => 0xa6,
            &IfICmpEq(_) => 0x9f,
            &IfICmpNe(_) => 0xa0,
            &IfICmpLt(_) => 0xa1,
            &IfICmpGe(_) => 0xa2,
            &IfICmpGt(_) => 0xa3,
            &IfICmpLe(_) => 0xa4,
            &IfEq(_) => 0x99,
            &IfNe(_) => 0x9a,
            &IfLt(_) => 0x9b,
            &IfGe(_) => 0x9c,
            &IfGt(_) => 0x9d,
            &IfLe(_) => 0x9e,
            &IfNonNull(_) => 0xc7,
            &IfNull(_) => 0xc6,
            &IInc(_, _) => 0x84,
            &ILoad(_) => 0x15,
            &ILoad0 => 0x1a,
            &ILoad1 => 0x1b,
            &ILoad2 => 0x1c,
            &ILoad3 => 0x1d,
            &IMul => 0x68,
            &INeg => 0x74,
            &InstanceOf(_) => 0xc1,
            &InvokeDynamic(_, _, _) => 0xba,
            &InvokeInterface(_, _) => 0xb9,
            &InvokeSpecial(_) => 0xb7,
            &InvokeStatic(_) => 0xb8,
            &InvokeVirtual(_) => 0xb6,
            &IOr => 0x80,
            &IRem => 0x70,
            &IReturn => 0xac,
            &IShl => 0x78,
            &IShr => 0x7a,
            &IStore(_) => 0x36,
            &IStore0 => 0x3b,
            &IStore1 => 0x3c,
            &IStore2 => 0x3d,
            &IStore3 => 0x3e,
            &ISub => 0x64,
            &IUShr => 0x7c,
            &IXor => 0x82,
            &Jsr(_) => 0xa8,
            &JsrW(_) => 0xc9,
            &L2D => 0x8a,
            &L2F => 0x89,
            &L2I => 0x88,
            &LAdd => 0x61,
            &LALoad => 0x2f,
            &LAnd => 0x7f,
            &LAStore => 0x50,
            &LCmp => 0x94,
            &LConst0 => 0x09,
            &LConst1 => 0x0a,
            &Ldc(_) => 0x12,
            &LdcW(_) => 0x13,
            &Ldc2W(_) => 0x14,
            &LDiv => 0x6d,
            &LLoad(_) => 0x16,
            &LLoad0 => 0x1e,
            &LLoad1 => 0x1f,
            &LLoad2 => 0x20,
            &LLoad3 => 0x21,
            &LMul => 0x69,
            &LNeg => 0x75,
            &LookupSwitch { .. } => 0xab,
            &TableSwitch { .. } => 0xaa,
            &LOr => 0x81,
            &LRem => 0x71,
            &LReturn => 0xad,
            &LShl => 0x79,
            &LShr => 0x7b,
            &LStore(_) => 0x37,
            &LStore0 => 0x3f,
            &LStore1 => 0x40,
            &LStore2 => 0x41,
            &LStore3 => 0x42,
            &LSub => 0x65,
            &LUShr => 0x7d,
            &LXor => 0x83,
            &MonitorEnter => 0xc2,
            &MonitorExit => 0xc3,
            &MultiANewArray(_, _) => 0xc5,
            &New(_) => 0xbb,
            &NewArray(_) => 0xbc,
            &Nop => 0x00,
            &Pop => 0x57,
            &Pop2 => 0x58,
            &PutField(_) => 0xb5,
            &PutStatic(_) => 0xb3,
            &Ret(_) => 0xa9,
            &Return => 0xb1,
            &SALoad => 0x35,
            &SAStore => 0x56,
            &SiPush(_) => 0x11,
            &Swap => 0x5f,
            &WideILoad(_)
            | &WideLLoad(_)
            | &WideFLoad(_)
            | &WideDLoad(_)
            | &WideALoad(_)
            | &WideIStore(_)
            | &WideLStore(_)
            | &WideFStore(_)
            | &WideDStore(_)
            | &WideAStore(_)
            | &WideIInc(_, _)
            | &WideRet(_) => 0xc4,

            &Breakpoint => 0xca,
            &ImpDep1 => 0xfe,
            &ImpDep2 => 0xff,
        }
    }

    /// Gets the name of the [Instruction].
    pub fn name(&self) -> &'static str {
        use Instruction::*;
        match self {
            &AALoad => "aaload",
            &AAStore => "aastore",
            &AConstNull => "aconst_null",
            &ALoad(_) => "aload",
            &ALoad0 => "aload_0",
            &ALoad1 => "aload_1",
            &ALoad2 => "aload_2",
            &ALoad3 => "aload_3",
            &ANewArray(_) => "anewarray",
            &AReturn => "areturn",
            &ArrayLength => "arraylength",
            &AStore(_) => "astore",
            &AStore0 => "astore_0",
            &AStore1 => "astore_1",
            &AStore2 => "astore_2",
            &AStore3 => "astore_3",
            &AThrow => "athrow",
            &BALoad => "baload",
            &BAStore => "bastore",
            &BiPush(_) => "bipush",
            &CALoad => "caload",
            &CAStore => "castore",
            &CheckCast(_) => "checkcast",
            &D2F => "d2f",
            &D2I => "d2i",
            &D2L => "d2l",
            &DAdd => "dadd",
            &DALoad => "daload",
            &DAStore => "dastore",
            &DCmpG => "dcmpg",
            &DCmpL => "dcmpl",
            &DConst0 => "dconst_0",
            &DConst1 => "dconst_1",
            &DDiv => "ddiv",
            &DLoad(_) => "dload",
            &DLoad0 => "dload_0",
            &DLoad1 => "dload_1",
            &DLoad2 => "dload_2",
            &DLoad3 => "dload_3",
            &DMul => "dmul",
            &DNeg => "dneg",
            &DRem => "drem",
            &DReturn => "dreturn",
            &DStore(_) => "dstore",
            &DStore0 => "dstore_0",
            &DStore1 => "dstore_1",
            &DStore2 => "dstore_2",
            &DStore3 => "dstore_3",
            &DSub => "dsub",
            &Dup => "dup",
            &DupX1 => "dup_x1",
            &DupX2 => "dup_x2",
            &Dup2 => "dup2",
            &Dup2X1 => "dup2_x1",
            &Dup2X2 => "dup2_x2",
            &F2D => "f2d",
            &F2I => "f2i",
            &F2L => "f2l",
            &FAdd => "fadd",
            &FALoad => "faload",
            &FAStore => "fastore",
            &FCmpG => "fcmpg",
            &FCmpL => "fcmpl",
            &FConst0 => "fconst_0",
            &FConst1 => "fconst_1",
            &FConst2 => "fconst_2",
            &FDiv => "fdiv",
            &FLoad(_) => "fload",
            &FLoad0 => "fload_0",
            &FLoad1 => "fload_1",
            &FLoad2 => "fload_2",
            &FLoad3 => "fload_3",
            &FMul => "fmul",
            &FNeg => "fneg",
            &FRem => "frem",
            &FReturn => "freturn",
            &FStore(_) => "fstore",
            &FStore0 => "fstore_0",
            &FStore1 => "fstore_1",
            &FStore2 => "fstore_2",
            &FStore3 => "fstore_3",
            &FSub => "fsub",
            &GetField(_) => "getfield",
            &GetStatic(_) => "getstatic",
            &Goto(_) => "goto",
            &GotoW(_) => "goto_w",
            &I2B => "i2b",
            &I2C => "i2c",
            &I2D => "i2d",
            &I2F => "i2f",
            &I2L => "i2l",
            &I2S => "i2s",
            &IAdd => "iadd",
            &IALoad => "iaload",
            &IAnd => "iand",
            &IAStore => "iastore",
            &IConstM1 => "iconst_m1",
            &IConst0 => "iconst_0",
            &IConst1 => "iconst_1",
            &IConst2 => "iconst_2",
            &IConst3 => "iconst_3",
            &IConst4 => "iconst_4",
            &IConst5 => "iconst_5",
            &IDiv => "idiv",
            &IfACmpEq(_) => "if_acmpeq",
            &IfACmpNe(_) => "if_acmpne",
            &IfICmpEq(_) => "if_icmpeq",
            &IfICmpNe(_) => "if_icmpne",
            &IfICmpLt(_) => "if_icmplt",
            &IfICmpGe(_) => "if_icmpge",
            &IfICmpGt(_) => "if_icmpgt",
            &IfICmpLe(_) => "if_icmple",
            &IfEq(_) => "ifeq",
            &IfNe(_) => "ifne",
            &IfLt(_) => "iflt",
            &IfGe(_) => "ifge",
            &IfGt(_) => "ifgt",
            &IfLe(_) => "ifle",
            &IfNonNull(_) => "ifnonnull",
            &IfNull(_) => "ifnull",
            &IInc(_, _) => "iinc",
            &ILoad(_) => "iload",
            &ILoad0 => "iload_0",
            &ILoad1 => "iload_1",
            &ILoad2 => "iload_2",
            &ILoad3 => "iload_3",
            &IMul => "imul",
            &INeg => "ineg",
            &InstanceOf(_) => "instanceof",
            &InvokeDynamic(_, _, _) => "invokedynamic",
            &InvokeInterface(_, _) => "invokeinterface",
            &InvokeSpecial(_) => "invokespecial",
            &InvokeStatic(_) => "invokestatic",
            &InvokeVirtual(_) => "invokevirtual",
            &IOr => "ior",
            &IRem => "irem",
            &IReturn => "ireturn",
            &IShl => "ishl",
            &IShr => "ishr",
            &IStore(_) => "istore",
            &IStore0 => "istore_0",
            &IStore1 => "istore_1",
            &IStore2 => "istore_2",
            &IStore3 => "istore_3",
            &ISub => "isub",
            &IUShr => "iushr",
            &IXor => "ixor",
            &Jsr(_) => "jsr",
            &JsrW(_) => "jsr_w",
            &L2D => "l2d",
            &L2F => "l2f",
            &L2I => "l2i",
            &LAdd => "ladd",
            &LALoad => "laload",
            &LAnd => "land",
            &LAStore => "lastore",
            &LCmp => "lcmp",
            &LConst0 => "lconst_0",
            &LConst1 => "lconst_1",
            &Ldc(_) => "ldc",
            &LdcW(_) => "ldc_w",
            &Ldc2W(_) => "ldc2_w",
            &LDiv => "ldiv",
            &LLoad(_) => "lload",
            &LLoad0 => "lload_0",
            &LLoad1 => "lload_1",
            &LLoad2 => "lload_2",
            &LLoad3 => "lload_3",
            &LMul => "lmul",
            &LNeg => "lneg",
            &LookupSwitch { .. } => "lookupswitch",
            &TableSwitch { .. } => "tableswitch",
            &LOr => "lor",
            &LRem => "lrem",
            &LReturn => "lreturn",
            &LShl => "lshl",
            &LShr => "lshr",
            &LStore(_) => "lstore",
            &LStore0 => "lstore_0",
            &LStore1 => "lstore_1",
            &LStore2 => "lstore_2",
            &LStore3 => "lstore_3",
            &LSub => "lsub",
            &LUShr => "lushr",
            &LXor => "lxor",
            &MonitorEnter => "monitorenter",
            &MonitorExit => "monitorexit",
            &MultiANewArray(_, _) => "multianewarray",
            &New(_) => "new",
            &NewArray(_) => "newarray",
            &Nop => "nop",
            &Pop => "pop",
            &Pop2 => "pop2",
            &PutField(_) => "putfield",
            &PutStatic(_) => "putstatic",
            &Ret(_) => "ret",
            &Return => "return",
            &SALoad => "saload",
            &SAStore => "sastore",
            &SiPush(_) => "sipush",
            &Swap => "swap",
            &WideILoad(_)
            | &WideLLoad(_)
            | &WideFLoad(_)
            | &WideDLoad(_)
            | &WideALoad(_)
            | &WideIStore(_)
            | &WideLStore(_)
            | &WideFStore(_)
            | &WideDStore(_)
            | &WideAStore(_)
            | &WideIInc(_, _)
            | &WideRet(_) => "wide",
            &Breakpoint => "breakpoint",
            &ImpDep1 => "impdep1",
            &ImpDep2 => "impdep2",
        }
    }
}

#[derive(Debug)]
pub struct ArrayTypeRef {
    pub base_type: FieldType,
    pub dimensions: u8,
}
